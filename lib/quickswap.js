'use strict';

const EMOTE_DELAY = 15; // in milliseconds

const COSTUME_SLOT = 17;
const EMOTES = [
  { emotes: [43, 44], limited: [136102, 136107, 136108, 136109, 131027, 131028, 131029, 131030, 167010, 167011, 167012, 167013, 167014, 167015, 177010, 177011, 177012, 177013, 177014, 177015, 115009, 115010, 115396, 115397, 116500, 131748, 131749, 178365, 178366, 178367, 178368, 178369, 178370, 180343, 180344, 180345, 180346, 180347, 180348, 115770, 115775, 115776, 115777, 131993, 139630, 181035, 181036, 181037, 181050, 181051, 181052, 181053, 181054, 181055, 181056, 181057, 181058, 178979, 178980, 178981, 178994, 178995, 178996, 178997, 178998, 178999, 179000, 179001, 179002, 220332, 220334, 220572, 211377, 211378, 211379, 211380, 211760, 211761, 211759, 211769, 211770, 211771, 211772, 211773, 211774, 214509, 221056, 220649, 220650, 220652, 220653] },
  { emotes: [45, 46], limited: [60803, 60804, 60805, 60806, 60807, 131218, 131219, 131220, 131221, 131222, 115069, 115781, 115782, 115783, 115784, 115785, 115070, 115071, 115072, 115073, 169108, 169109, 169110, 169111, 169112, 169113, 169114, 169115, 169116, 177380, 177381, 177382, 177383, 177384, 177385, 177386, 177387, 177388, 169117, 169118, 169119, 169120, 169121, 169122, 177389, 177390, 177391, 177392, 177393, 177394, 179123, 179124, 179125, 179126, 179127, 179128, 179129, 179130, 179131, 179132, 179133, 179134, 179135, 179136, 179137, 181168, 181169, 181170, 181171, 181172, 181173, 181174, 181175, 181176, 181177, 181178, 181179, 181180, 181181, 181182, 200242, 200243, 200244, 200245, 200246, 210732, 210733, 210734, 210735, 210736, 210737, 210738, 210739, 210740, 210741, 211855, 211856, 211857, 211858, 211859, 211860, 211861, 211862, 211863, 211864, 211865, 220975, 221017] },
  { emotes: [47, 48], limited: [60808, 60809, 60810, 60811, 60812, 131223, 131224, 131225, 131226, 131227, 115074, 115075, 115076, 115077, 115078, 115786, 115787, 115788, 115789, 115790, 169123, 169124, 169125, 169126, 169127, 169128, 169129, 169130, 169131, 177395, 177396, 177397, 177398, 177399, 177400, 177401, 177402, 177403, 169132, 169133, 169134, 169135, 169136, 169137, 177404, 177405, 177406, 177407, 177408, 177409, 179138, 179139, 179140, 179141, 179142, 179143, 179144, 179145, 179146, 179147, 179148, 179149, 179150, 179151, 179152, 181183, 181184, 181185, 181186, 181187, 181188, 181189, 181190, 181191, 181192, 181193, 181194, 181195, 181196, 181197, 200247, 200248, 200249, 200250, 200251, 210742, 210743, 210744, 210745, 210746, 210747, 210748, 210749, 210750, 210751, 211865, 211866, 211867, 211868, 211869, 211870, 211871, 211872, 211873, 211874, 211875, 220976, 221018] },
  { emotes: [49, 50], limited: [60813, 60814, 60815, 60816, 60817, 131228, 131229, 131230, 131231, 131232, 115079, 115080, 115081, 115082, 115083, 115791, 115792, 115793, 115794, 115795, 169138, 169139, 169140, 169141, 169142, 169143, 169144, 169145, 169146, 177410, 177411, 177412, 177413, 177414, 177415, 177416, 177417, 177418, 169147, 169148, 169149, 169150, 169151, 169152, 177419, 177420, 177421, 177422, 177423, 177424, 179153, 179154, 179155, 179156, 179157, 179158, 179159, 179160, 179161, 179162, 179163, 179164, 179165, 179166, 179167, 181198, 181199, 181200, 181201, 181202, 181203, 181204, 181205, 181206, 181207, 181208, 181209, 181210, 181211, 181212, 200252, 200253, 200254, 200255, 200256, 210752, 210753, 210754, 210755, 210756, 210757, 210758, 210759, 210760, 210761, 211875, 211876, 211877, 211878, 211879, 211880, 211881, 211882, 211883, 211884, 211885, 220977, 221019] },
  { emotes: [51, 52], limited: [60818, 60819, 60820, 60821, 60822, 60823, 60824, 131233, 131302, 131303, 131304, 131305, 115084, 115085, 115086, 115087, 115088, 115796, 115797, 115798, 115799, 115800, 115801, 115802, 169153, 169154, 169155, 169330, 169331, 169332, 177425, 177426, 177427, 177602, 177603, 177604, 169333, 169334, 169335, 169336, 169337, 169338, 169339, 169340, 169341, 177605, 177606, 177607, 177608, 177609, 177610, 177611, 177612, 177613, 179168, 179169, 179170, 179171, 179172, 179173, 179174, 179175, 179176, 179177, 179178, 179179, 179180, 179181, 179182, 179183, 179184, 179185, 179186, 179187, 179188, 181213, 181214, 181215, 181216, 181217, 181218, 181219, 181220, 181221, 181222, 181223, 181224, 181225, 181226, 181227, 181228, 181229, 181230, 181231, 181232, 181233, 200257, 200258, 200259, 200260, 200261, 210762, 210763, 210880, 210881, 210882, 210883, 210884, 210885, 210886, 210887, 211885, 211886, 211887, 211888, 211889, 211890, 211891, 211892, 211893, 211894, 211895, 211896, 211897, 211898, 211899, 220978, 221020] },
];

module.exports = function quickswap(base) {
  /********
   * VARS *
   ********/
  const dispatch = base.dispatch;

  let cid = { high: 0, low: 0 };
  let items = [];
  let costume = 0;
  let original = 0;
  let swapping = 0;

  /*******
   * API *
   *******/
  // returns:
  //   -2 : Emote not recognized
  //   -1 : Cannot perform the emote (no matching costume)
  //    0 : Currently swapping; try again later
  //    1 : Success
  function doEmote(emote, alwaysSend) {
    if (swapping) return 0;

    for (let group of EMOTES) {
      if (group.emotes.indexOf(emote) === -1) continue;

      if (group.limited.indexOf(costume) !== -1) {
        if (alwaysSend) dispatch.toServer('cSocial', { emote: emote, unk: 0 });
        return 1;
      }

      for (let item of items) {
        if (group.limited.indexOf(item.item) === -1) continue;

        original = costume;
        swapping = 1;

        dispatch.toServer('cEquipItem', {
          cid: cid,
          slot: item.slot,
          unk: 0,
        });

        setTimeout(() => {
          dispatch.toServer('cSocial', { emote: emote, unk: 0 });

          if (original !== 0) {
            dispatch.toServer('cEquipItem', {
              cid: cid,
              slot: item.slot,
              unk: 0,
            });
          } else {
            dispatch.toServer('cUnequipItem', {
              cid: cid,
              slot: COSTUME_SLOT,
              unk: 0,
              item: item.item,
            });
          }
        }, EMOTE_DELAY);

        return 1;
      }

      return -1;
    }

    return -2;
  };
  this.doEmote = doEmote;

  /*********
   * HOOKS *
   *********/
  dispatch.hook('sLogin', function sLogin(event) {
    cid = event.cid;
  });

  dispatch.hook('sInven', function sInven(event) {
    if (event.first) {
      items = [];
      costume = 0;
    }

    [].push.apply(items, event.items);

    for (let item of event.items) {
      if (item.slot === COSTUME_SLOT) {
        costume = item.item;
      }
    }
  });

  dispatch.hook('cSocial', function cSocial(event) {
    doEmote(event.emote);
  });

  dispatch.hook('sUserExternalChange', function sUserExternalChange(event) {
    switch (swapping) {
      case 1:
        if (event.costume !== original) {
          swapping = 2;
          return false;
        }
        break;
      case 2:
        if (event.costume === original) {
          swapping = 0;
          return false;
        }
    }
  });
};
